import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.Bw7rlmih.js";const c=JSON.parse('{"title":"Input and Output Formats","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/formats.md","filePath":"concepts/formats.md"}'),e={name:"concepts/formats.md"};function l(p,s,h,o,r,k){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="input-and-output-formats" tabindex="-1">Input and Output Formats <a class="header-anchor" href="#input-and-output-formats" aria-label="Permalink to &quot;Input and Output Formats&quot;">​</a></h1><p>Konfigo provides comprehensive support for multiple configuration formats, enabling seamless conversion and processing across different file types.</p><h2 id="supported-formats" tabindex="-1">Supported Formats <a class="header-anchor" href="#supported-formats" aria-label="Permalink to &quot;Supported Formats&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Format</th><th>Extensions</th><th>Input</th><th>Output</th><th>Features</th></tr></thead><tbody><tr><td><strong>JSON</strong></td><td><code>.json</code></td><td>✅</td><td>✅</td><td>Precise typing, compact, widely supported</td></tr><tr><td><strong>YAML</strong></td><td><code>.yaml</code>, <code>.yml</code></td><td>✅</td><td>✅</td><td>Human-readable, comments, multi-document</td></tr><tr><td><strong>TOML</strong></td><td><code>.toml</code></td><td>✅</td><td>✅</td><td>Configuration-focused, strongly typed</td></tr><tr><td><strong>ENV</strong></td><td><code>.env</code></td><td>✅</td><td>✅</td><td>Environment variables, simple key-value</td></tr><tr><td><strong>INI</strong></td><td><code>.ini</code></td><td>✅</td><td>❌</td><td>Legacy support, sections</td></tr></tbody></table><h2 id="format-detection" tabindex="-1">Format Detection <a class="header-anchor" href="#format-detection" aria-label="Permalink to &quot;Format Detection&quot;">​</a></h2><p>Konfigo automatically detects input formats using multiple methods:</p><h3 id="_1-file-extension-primary" tabindex="-1">1. File Extension (Primary) <a class="header-anchor" href="#_1-file-extension-primary" aria-label="Permalink to &quot;1. File Extension (Primary)&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Detected as JSON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.yaml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # Detected as YAML</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> settings.toml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Detected as TOML</span></span></code></pre></div><h3 id="_2-content-analysis-fallback" tabindex="-1">2. Content Analysis (Fallback) <a class="header-anchor" href="#_2-content-analysis-fallback" aria-label="Permalink to &quot;2. Content Analysis (Fallback)&quot;">​</a></h3><p>When file extensions are missing or ambiguous, Konfigo analyzes content structure:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # Auto-detects based on content</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Analyzes content structure</span></span></code></pre></div><h3 id="_3-format-override-explicit" tabindex="-1">3. Format Override (Explicit) <a class="header-anchor" href="#_3-format-override-explicit" aria-label="Permalink to &quot;3. Format Override (Explicit)&quot;">​</a></h3><p>Force specific format parsing:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sj</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Force JSON parsing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sy</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Force YAML parsing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> settings</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -st</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Force TOML parsing</span></span></code></pre></div><h2 id="format-specific-features" tabindex="-1">Format-Specific Features <a class="header-anchor" href="#format-specific-features" aria-label="Permalink to &quot;Format-Specific Features&quot;">​</a></h2><h3 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">​</a></h3><ul><li><strong>Strengths</strong>: Precise typing, compact, universal support</li><li><strong>Use Cases</strong>: APIs, data exchange, compact storage</li><li><strong>Example</strong>:</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;features&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="yaml" tabindex="-1">YAML <a class="header-anchor" href="#yaml" aria-label="Permalink to &quot;YAML&quot;">​</a></h3><ul><li><strong>Strengths</strong>: Human-readable, supports comments, multi-document</li><li><strong>Use Cases</strong>: Configuration files, documentation, complex structures</li><li><strong>Example</strong>:</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Application configuration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  features</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">auth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cache</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Development settings</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h3 id="toml" tabindex="-1">TOML <a class="header-anchor" href="#toml" aria-label="Permalink to &quot;TOML&quot;">​</a></h3><ul><li><strong>Strengths</strong>: Configuration-focused, strongly typed, readable</li><li><strong>Use Cases</strong>: Application configuration, settings files</li><li><strong>Example</strong>:</li></ul><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-service&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">features = [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5432</span></span></code></pre></div><h3 id="env" tabindex="-1">ENV <a class="header-anchor" href="#env" aria-label="Permalink to &quot;ENV&quot;">​</a></h3><ul><li><strong>Strengths</strong>: Simple key-value, environment integration</li><li><strong>Use Cases</strong>: Environment variables, Docker configs, CI/CD</li><li><strong>Example</strong>:</li></ul><div class="language-env vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>APP_NAME=my-service</span></span>
<span class="line"><span>APP_PORT=8080</span></span>
<span class="line"><span>DATABASE_HOST=localhost</span></span>
<span class="line"><span>DATABASE_PORT=5432</span></span></code></pre></div><h3 id="ini-input-only" tabindex="-1">INI (Input Only) <a class="header-anchor" href="#ini-input-only" aria-label="Permalink to &quot;INI (Input Only)&quot;">​</a></h3><ul><li><strong>Strengths</strong>: Legacy support, simple sections</li><li><strong>Use Cases</strong>: Legacy applications, simple configurations</li><li><strong>Example</strong>:</li></ul><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[app]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = my-service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[database]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = localhost</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 5432</span></span></code></pre></div><h2 id="multiple-output-formats" tabindex="-1">Multiple Output Formats <a class="header-anchor" href="#multiple-output-formats" aria-label="Permalink to &quot;Multiple Output Formats&quot;">​</a></h2><p>Generate output in multiple formats simultaneously:</p><h3 id="stdout-multiple-formats" tabindex="-1">Stdout Multiple Formats <a class="header-anchor" href="#stdout-multiple-formats" aria-label="Permalink to &quot;Stdout Multiple Formats&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output JSON and YAML to stdout</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oj</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output all supported formats</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oj</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oe</span></span></code></pre></div><h3 id="files-and-stdout-combined" tabindex="-1">Files and Stdout Combined <a class="header-anchor" href="#files-and-stdout-combined" aria-label="Permalink to &quot;Files and Stdout Combined&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Save to file and display on stdout</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> final.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Multiple file formats</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> settings.toml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span></code></pre></div><h2 id="stdin-processing" tabindex="-1">Stdin Processing <a class="header-anchor" href="#stdin-processing" aria-label="Permalink to &quot;Stdin Processing&quot;">​</a></h2><p>Process configurations from standard input with format specification:</p><h3 id="basic-stdin-usage" tabindex="-1">Basic Stdin Usage <a class="header-anchor" href="#basic-stdin-usage" aria-label="Permalink to &quot;Basic Stdin Usage&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># From file redirection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># From pipe</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sy</span></span></code></pre></div><h3 id="advanced-stdin-examples" tabindex="-1">Advanced Stdin Examples <a class="header-anchor" href="#advanced-stdin-examples" aria-label="Permalink to &quot;Advanced Stdin Examples&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># From command output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># From curl/API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://api.example.com/config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sj</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># From heredoc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name: test-app</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  port: 8080</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  features:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    auth: true</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><h3 id="stdin-with-schema-processing" tabindex="-1">Stdin with Schema Processing <a class="header-anchor" href="#stdin-with-schema-processing" aria-label="Permalink to &quot;Stdin with Schema Processing&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Process stdin with schema and variables</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{&quot;env&quot;: &quot;dev&quot;}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sj</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vars.yaml</span></span></code></pre></div><h2 id="format-conversion-examples" tabindex="-1">Format Conversion Examples <a class="header-anchor" href="#format-conversion-examples" aria-label="Permalink to &quot;Format Conversion Examples&quot;">​</a></h2><h3 id="json-to-yaml" tabindex="-1">JSON to YAML <a class="header-anchor" href="#json-to-yaml" aria-label="Permalink to &quot;JSON to YAML&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span></code></pre></div><h3 id="yaml-to-toml" tabindex="-1">YAML to TOML <a class="header-anchor" href="#yaml-to-toml" aria-label="Permalink to &quot;YAML to TOML&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ot</span></span></code></pre></div><h3 id="multiple-sources-to-single-format" tabindex="-1">Multiple Sources to Single Format <a class="header-anchor" href="#multiple-sources-to-single-format" aria-label="Permalink to &quot;Multiple Sources to Single Format&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml,prod.json,local.toml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oj</span></span></code></pre></div><h3 id="env-to-structured-format" tabindex="-1">ENV to Structured Format <a class="header-anchor" href="#env-to-structured-format" aria-label="Permalink to &quot;ENV to Structured Format&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Converts flat key-value to nested YAML structure</span></span></code></pre></div><h2 id="format-specific-considerations" tabindex="-1">Format-Specific Considerations <a class="header-anchor" href="#format-specific-considerations" aria-label="Permalink to &quot;Format-Specific Considerations&quot;">​</a></h2><h3 id="data-type-preservation" tabindex="-1">Data Type Preservation <a class="header-anchor" href="#data-type-preservation" aria-label="Permalink to &quot;Data Type Preservation&quot;">​</a></h3><ul><li><strong>JSON</strong>: Maintains precise typing (numbers, booleans, null)</li><li><strong>YAML</strong>: Supports rich typing with automatic inference</li><li><strong>TOML</strong>: Strong typing with explicit type specification</li><li><strong>ENV</strong>: String-based with optional type conversion</li></ul><h3 id="comments-and-documentation" tabindex="-1">Comments and Documentation <a class="header-anchor" href="#comments-and-documentation" aria-label="Permalink to &quot;Comments and Documentation&quot;">​</a></h3><ul><li><strong>YAML</strong>: Full comment support preserved in processing</li><li><strong>TOML</strong>: Comment support with preservation</li><li><strong>JSON</strong>: No native comment support</li><li><strong>ENV</strong>: Comment support with <code>#</code> prefix</li></ul><h3 id="complex-data-structures" tabindex="-1">Complex Data Structures <a class="header-anchor" href="#complex-data-structures" aria-label="Permalink to &quot;Complex Data Structures&quot;">​</a></h3><ul><li><strong>JSON/YAML</strong>: Full support for nested objects and arrays</li><li><strong>TOML</strong>: Good support with table syntax</li><li><strong>ENV</strong>: Flat key-value with path notation support</li><li><strong>INI</strong>: Basic sections, limited nesting</li></ul><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li><p><strong>Choose Format by Use Case</strong>:</p><ul><li>YAML for human-edited configuration</li><li>JSON for APIs and data exchange</li><li>TOML for application settings</li><li>ENV for environment-specific values</li></ul></li><li><p><strong>Consistent Format Strategy</strong>:</p><ul><li>Use consistent formats within projects</li><li>Document format choices for team members</li></ul></li><li><p><strong>Leverage Auto-Detection</strong>:</p><ul><li>Use clear file extensions</li><li>Let Konfigo detect formats automatically</li></ul></li><li><p><strong>Test Format Conversions</strong>:</p><ul><li>Verify data integrity across format conversions</li><li>Check for type preservation requirements</li></ul></li><li><p><strong>Handle Stdin Gracefully</strong>:</p><ul><li>Always specify format for stdin input</li><li>Validate piped input before processing</li></ul></li></ol>`,62)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
