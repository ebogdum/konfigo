import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Bw7rlmih.js";const c=JSON.parse('{"title":"Format Conversion","description":"","frontmatter":{},"headers":[],"relativePath":"features/format-conversion.md","filePath":"features/format-conversion.md"}'),l={name:"features/format-conversion.md"};function e(p,s,h,o,k,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="format-conversion" tabindex="-1">Format Conversion <a class="header-anchor" href="#format-conversion" aria-label="Permalink to &quot;Format Conversion&quot;">​</a></h1><p>Konfigo supports reading and writing configuration files in multiple formats: JSON, YAML, TOML, ENV, and INI. The tool can automatically detect input formats and convert between any supported formats.</p><h2 id="supported-formats" tabindex="-1">Supported Formats <a class="header-anchor" href="#supported-formats" aria-label="Permalink to &quot;Supported Formats&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Format</th><th>Extensions</th><th>Input</th><th>Output</th><th>Auto-detect</th></tr></thead><tbody><tr><td>JSON</td><td><code>.json</code></td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>YAML</td><td><code>.yml</code>, <code>.yaml</code></td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>TOML</td><td><code>.toml</code></td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>ENV</td><td><code>.env</code></td><td>✅</td><td>✅</td><td>❌*</td></tr><tr><td>INI</td><td><code>.ini</code></td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><p>*ENV format requires explicit format flag when reading from stdin</p><h2 id="input-format-control" tabindex="-1">Input Format Control <a class="header-anchor" href="#input-format-control" aria-label="Permalink to &quot;Input Format Control&quot;">​</a></h2><h3 id="automatic-detection" tabindex="-1">Automatic Detection <a class="header-anchor" href="#automatic-detection" aria-label="Permalink to &quot;Automatic Detection&quot;">​</a></h3><p>Konfigo automatically detects input format based on file extensions:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Auto-detected as JSON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Auto-detected as YAML  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Auto-detected as TOML</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.toml</span></span></code></pre></div><h3 id="explicit-format-override" tabindex="-1">Explicit Format Override <a class="header-anchor" href="#explicit-format-override" aria-label="Permalink to &quot;Explicit Format Override&quot;">​</a></h3><p>Force specific input format using format flags:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Force JSON parsing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Force YAML parsing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Force TOML parsing  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -st</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Force ENV parsing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -se</span></span></code></pre></div><h3 id="stdin-format-requirements" tabindex="-1">Stdin Format Requirements <a class="header-anchor" href="#stdin-format-requirements" aria-label="Permalink to &quot;Stdin Format Requirements&quot;">​</a></h3><p>When reading from stdin, format must be explicitly specified:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># JSON from stdin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># YAML from stdin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># TOML from stdin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.toml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -st</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ENV from stdin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -se</span></span></code></pre></div><h2 id="output-format-control" tabindex="-1">Output Format Control <a class="header-anchor" href="#output-format-control" aria-label="Permalink to &quot;Output Format Control&quot;">​</a></h2><h3 id="single-format-output" tabindex="-1">Single Format Output <a class="header-anchor" href="#single-format-output" aria-label="Permalink to &quot;Single Format Output&quot;">​</a></h3><p>Specify output format using format flags:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output as JSON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output as YAML (default)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output as TOML</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ot</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output as ENV</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oe</span></span></code></pre></div><h3 id="file-output-with-format-detection" tabindex="-1">File Output with Format Detection <a class="header-anchor" href="#file-output-with-format-detection" aria-label="Permalink to &quot;File Output with Format Detection&quot;">​</a></h3><p>Use <code>-of</code> to write to file with automatic format detection:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Format determined by extension</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # JSON output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.toml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # TOML output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.toml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.yml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # YAML output</span></span></code></pre></div><h3 id="multiple-output-formats" tabindex="-1">Multiple Output Formats <a class="header-anchor" href="#multiple-output-formats" aria-label="Permalink to &quot;Multiple Output Formats&quot;">​</a></h3><p>Generate multiple output formats simultaneously:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output to stdout in both JSON and YAML</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.toml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oj</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># File output with additional stdout format</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span></code></pre></div><h2 id="format-conversion-examples" tabindex="-1">Format Conversion Examples <a class="header-anchor" href="#format-conversion-examples" aria-label="Permalink to &quot;Format Conversion Examples&quot;">​</a></h2><p>Based on test cases from <code>test/format-conversion/</code>:</p><h3 id="json-to-yaml" tabindex="-1">JSON to YAML <a class="header-anchor" href="#json-to-yaml" aria-label="Permalink to &quot;JSON to YAML&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Input: config.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;service&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;name&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my-app&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;port&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;database&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;host&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;localhost&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;port&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5432</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Convert to YAML</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  port:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">database:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  host:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  port:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5432</span></span></code></pre></div><h3 id="yaml-to-toml" tabindex="-1">YAML to TOML <a class="header-anchor" href="#yaml-to-toml" aria-label="Permalink to &quot;YAML to TOML&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Input: config.yml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  port:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">features:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> auth</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logging</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Convert to TOML</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ot</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[service]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my-app&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">features</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;logging&quot;]</span></span></code></pre></div><h3 id="multiple-formats-to-env" tabindex="-1">Multiple Formats to ENV <a class="header-anchor" href="#multiple-formats-to-env" aria-label="Permalink to &quot;Multiple Formats to ENV&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Merge JSON and YAML, output as ENV</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.json,override.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SERVICE_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SERVICE_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">9090</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DATABASE_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prod-db.example.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DATABASE_SSL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span></code></pre></div><h2 id="format-specific-features" tabindex="-1">Format-Specific Features <a class="header-anchor" href="#format-specific-features" aria-label="Permalink to &quot;Format-Specific Features&quot;">​</a></h2><h3 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">​</a></h3><ul><li>Preserves exact numeric types</li><li>Supports nested objects and arrays</li><li>UTF-8 encoding support</li></ul><h3 id="yaml" tabindex="-1">YAML <a class="header-anchor" href="#yaml" aria-label="Permalink to &quot;YAML&quot;">​</a></h3><ul><li>Human-readable format</li><li>Supports comments</li><li>Multi-document files (first document used)</li><li>Type inference for scalars</li></ul><h3 id="toml" tabindex="-1">TOML <a class="header-anchor" href="#toml" aria-label="Permalink to &quot;TOML&quot;">​</a></h3><ul><li>Strongly typed</li><li>Clear section hierarchy</li><li>Good for configuration files</li><li>Date/time support</li></ul><h3 id="env" tabindex="-1">ENV <a class="header-anchor" href="#env" aria-label="Permalink to &quot;ENV&quot;">​</a></h3><ul><li>Key-value pairs only</li><li>Nested objects flattened with underscores</li><li>All values treated as strings</li><li>Uppercase key normalization</li></ul><h3 id="ini" tabindex="-1">INI <a class="header-anchor" href="#ini" aria-label="Permalink to &quot;INI&quot;">​</a></h3><ul><li>Section-based structure</li><li>Simple key-value pairs</li><li>Comments supported</li><li>Case-insensitive keys</li></ul><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><h3 id="invalid-format" tabindex="-1">Invalid Format <a class="header-anchor" href="#invalid-format" aria-label="Permalink to &quot;Invalid Format&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Malformed JSON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> invalid.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Error: failed to parse file: invalid character &#39;}&#39; looking for beginning of object key string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Mismatched format override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;invalid: json&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sj</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Error: failed to parse stdin: invalid character &#39;:&#39; after top-level value</span></span></code></pre></div><h3 id="unsupported-conversions" tabindex="-1">Unsupported Conversions <a class="header-anchor" href="#unsupported-conversions" aria-label="Permalink to &quot;Unsupported Conversions&quot;">​</a></h3><p>All supported formats can convert to any other supported format. Konfigo handles type coercion automatically:</p><ul><li>Numbers preserved where possible</li><li>Booleans converted to strings in ENV format</li><li>Complex structures flattened for ENV output</li><li>Arrays serialized as comma-separated values in ENV</li></ul><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li><strong>Auto-detection</strong>: Let Konfigo detect formats when possible for cleaner commands</li><li><strong>Explicit stdin</strong>: Always specify format when reading from stdin</li><li><strong>File extensions</strong>: Use standard extensions for automatic format detection</li><li><strong>ENV limitations</strong>: Be aware that ENV format has structural limitations</li><li><strong>Type preservation</strong>: Use JSON/YAML/TOML for preserving complex data types</li></ol><h2 id="test-coverage" tabindex="-1">Test Coverage <a class="header-anchor" href="#test-coverage" aria-label="Permalink to &quot;Test Coverage&quot;">​</a></h2><p>Format conversion is tested comprehensively in <code>test/format-conversion/</code>:</p><ul><li>Cross-format conversion matrix</li><li>Type preservation verification</li><li>Error condition handling</li><li>Edge cases and special characters</li></ul>`,55)]))}const F=i(l,[["render",e]]);export{c as __pageData,F as default};
