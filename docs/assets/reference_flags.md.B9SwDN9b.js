import{_ as e,c as a,o as i,ae as o}from"./chunks/framework.Bw7rlmih.js";const u=JSON.parse('{"title":"Command Flags Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference/flags.md","filePath":"reference/flags.md"}'),r={name:"reference/flags.md"};function d(s,t,n,l,c,h){return i(),a("div",null,t[0]||(t[0]=[o(`<h1 id="command-flags-reference" tabindex="-1">Command Flags Reference <a class="header-anchor" href="#command-flags-reference" aria-label="Permalink to &quot;Command Flags Reference&quot;">​</a></h1><p>This page provides comprehensive documentation for all Konfigo command-line flags and options.</p><h2 id="command-line-interface" tabindex="-1">Command-Line Interface <a class="header-anchor" href="#command-line-interface" aria-label="Permalink to &quot;Command-Line Interface&quot;">​</a></h2><h3 id="global-options" tabindex="-1">Global Options <a class="header-anchor" href="#global-options" aria-label="Permalink to &quot;Global Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Flag</th><th>Long Form</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>-h</code></td><td><code>--help</code></td><td>Show help message</td><td>-</td></tr><tr><td><code>-v</code></td><td><code>--verbose</code></td><td>Enable informational logging</td><td>false</td></tr><tr><td><code>-d</code></td><td><code>--debug</code></td><td>Enable debug logging</td><td>false</td></tr><tr><td><code>-c</code></td><td><code>--case-sensitive</code></td><td>Use case-sensitive key matching</td><td>false</td></tr><tr><td><code>-r</code></td><td><code>--recursive</code></td><td>Recursively search subdirectories</td><td>false</td></tr></tbody></table><h3 id="source-input-options" tabindex="-1">Source Input Options <a class="header-anchor" href="#source-input-options" aria-label="Permalink to &quot;Source Input Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Flag</th><th>Long Form</th><th>Description</th><th>Notes</th></tr></thead><tbody><tr><td><code>-s</code></td><td><code>--sources</code></td><td>Comma-separated list of source files/directories</td><td>Required</td></tr><tr><td><code>-sj</code></td><td><code>--source-json</code></td><td>Force input parsing as JSON</td><td>For stdin or ambiguous files</td></tr><tr><td><code>-sy</code></td><td><code>--source-yaml</code></td><td>Force input parsing as YAML</td><td>For stdin or ambiguous files</td></tr><tr><td><code>-st</code></td><td><code>--source-toml</code></td><td>Force input parsing as TOML</td><td>For stdin or ambiguous files</td></tr><tr><td><code>-se</code></td><td><code>--source-env</code></td><td>Force input parsing as ENV</td><td>For stdin or ambiguous files</td></tr></tbody></table><h3 id="schema-processing-options" tabindex="-1">Schema Processing Options <a class="header-anchor" href="#schema-processing-options" aria-label="Permalink to &quot;Schema Processing Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Flag</th><th>Long Form</th><th>Description</th><th>Notes</th></tr></thead><tbody><tr><td><code>-S</code></td><td><code>--schema</code></td><td>Path to schema file</td><td>Enables advanced processing</td></tr><tr><td><code>-V</code></td><td><code>--vars-file</code></td><td>Path to variables file</td><td>High-priority variable definitions</td></tr></tbody></table><h3 id="output-format-options" tabindex="-1">Output Format Options <a class="header-anchor" href="#output-format-options" aria-label="Permalink to &quot;Output Format Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Flag</th><th>Long Form</th><th>Description</th><th>Notes</th></tr></thead><tbody><tr><td><code>-oj</code></td><td><code>--output-json</code></td><td>Output in JSON format</td><td>-</td></tr><tr><td><code>-oy</code></td><td><code>--output-yaml</code></td><td>Output in YAML format</td><td>-</td></tr><tr><td><code>-ot</code></td><td><code>--output-toml</code></td><td>Output in TOML format</td><td>-</td></tr><tr><td><code>-oe</code></td><td><code>--output-env</code></td><td>Output in ENV format</td><td>-</td></tr><tr><td><code>-of</code></td><td><code>--output-file</code></td><td>Write output to file</td><td>Extension determines format</td></tr></tbody></table><h2 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h2><h3 id="runtime-configuration-overrides" tabindex="-1">Runtime Configuration Overrides <a class="header-anchor" href="#runtime-configuration-overrides" aria-label="Permalink to &quot;Runtime Configuration Overrides&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Variable Pattern</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>KONFIGO_KEY_*</code></td><td>Override any configuration key</td><td><code>KONFIGO_KEY_app.port=8080</code></td></tr><tr><td><code>KONFIGO_VAR_*</code></td><td>Define schema variables</td><td><code>KONFIGO_VAR_DATABASE_HOST=prod-db.com</code></td></tr></tbody></table><h3 id="processing-control" tabindex="-1">Processing Control <a class="header-anchor" href="#processing-control" aria-label="Permalink to &quot;Processing Control&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Variable</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>KONFIGO_LOG_LEVEL</code></td><td>Set logging level (ERROR, WARN, INFO, DEBUG)</td><td>ERROR</td></tr><tr><td><code>KONFIGO_CONFIG_PATH</code></td><td>Default search paths for config files</td><td>Current directory</td></tr></tbody></table><h2 id="exit-codes" tabindex="-1">Exit Codes <a class="header-anchor" href="#exit-codes" aria-label="Permalink to &quot;Exit Codes&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Code</th><th>Meaning</th><th>Description</th></tr></thead><tbody><tr><td>0</td><td>Success</td><td>Operation completed successfully</td></tr><tr><td>1</td><td>General Error</td><td>Invalid arguments or processing error</td></tr><tr><td>2</td><td>File Error</td><td>Source file not found or unreadable</td></tr><tr><td>3</td><td>Parse Error</td><td>Invalid syntax in source or schema files</td></tr><tr><td>4</td><td>Validation Error</td><td>Schema validation failed</td></tr><tr><td>5</td><td>Schema Error</td><td>Invalid or malformed schema</td></tr></tbody></table><h2 id="file-format-support" tabindex="-1">File Format Support <a class="header-anchor" href="#file-format-support" aria-label="Permalink to &quot;File Format Support&quot;">​</a></h2><h3 id="input-formats" tabindex="-1">Input Formats <a class="header-anchor" href="#input-formats" aria-label="Permalink to &quot;Input Formats&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Format</th><th>Extensions</th><th>Parser</th><th>Notes</th></tr></thead><tbody><tr><td>JSON</td><td><code>.json</code>, <code>.jsonc</code></td><td>Standard JSON with comment support</td><td>JSONC comments supported</td></tr><tr><td>YAML</td><td><code>.yaml</code>, <code>.yml</code></td><td>YAML 1.2 compliant</td><td>Full spec support</td></tr><tr><td>TOML</td><td><code>.toml</code></td><td>TOML v1.0.0</td><td>Complete specification</td></tr><tr><td>ENV</td><td><code>.env</code>, <code>.envrc</code></td><td>Key=value pairs</td><td>Shell-style variables</td></tr></tbody></table><h3 id="output-formats" tabindex="-1">Output Formats <a class="header-anchor" href="#output-formats" aria-label="Permalink to &quot;Output Formats&quot;">​</a></h3><p>All input formats are supported as output formats with automatic conversion between them.</p><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><h3 id="common-error-patterns" tabindex="-1">Common Error Patterns <a class="header-anchor" href="#common-error-patterns" aria-label="Permalink to &quot;Common Error Patterns&quot;">​</a></h3><ul><li><strong>File not found</strong>: Check file paths and permissions</li><li><strong>Parse errors</strong>: Validate syntax with format-specific tools</li><li><strong>Schema errors</strong>: Verify schema structure and required fields</li><li><strong>Validation failures</strong>: Check data types and constraints</li></ul><h3 id="debug-information" tabindex="-1">Debug Information <a class="header-anchor" href="#debug-information" aria-label="Permalink to &quot;Debug Information&quot;">​</a></h3><p>Use <code>-v</code> or <code>-d</code> flags to get detailed information about:</p><ul><li>File discovery and loading</li><li>Merge order and precedence</li><li>Schema processing steps</li><li>Variable substitution</li><li>Validation results</li></ul><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h2><h3 id="large-configuration-files" tabindex="-1">Large Configuration Files <a class="header-anchor" href="#large-configuration-files" aria-label="Permalink to &quot;Large Configuration Files&quot;">​</a></h3><ul><li>Use streaming parsers for files &gt;100MB</li><li>Consider splitting large schemas into modules</li><li>Batch processing for multiple environments</li></ul><h3 id="memory-usage" tabindex="-1">Memory Usage <a class="header-anchor" href="#memory-usage" aria-label="Permalink to &quot;Memory Usage&quot;">​</a></h3><ul><li>Konfigo loads all source files into memory</li><li>Schema processing requires additional memory for transformations</li><li>Monitor usage with large variable files</li></ul><h2 id="integration-patterns" tabindex="-1">Integration Patterns <a class="header-anchor" href="#integration-patterns" aria-label="Permalink to &quot;Integration Patterns&quot;">​</a></h2><h3 id="ci-cd-integration" tabindex="-1">CI/CD Integration <a class="header-anchor" href="#ci-cd-integration" aria-label="Permalink to &quot;CI/CD Integration&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Typical pipeline usage</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml,env/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${ENVIRONMENT}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span></span></code></pre></div><h3 id="container-integration" tabindex="-1">Container Integration <a class="header-anchor" href="#container-integration" aria-label="Permalink to &quot;Container Integration&quot;">​</a></h3><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Multi-stage build pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> konfigo:latest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config-builder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configs/ /configs/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> konfigo -s /configs/base.yaml,/configs/prod.yaml -of /tmp/final.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alpine:latest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=config-builder /tmp/final.json /app/config.json</span></span></code></pre></div><h3 id="library-integration" tabindex="-1">Library Integration <a class="header-anchor" href="#library-integration" aria-label="Permalink to &quot;Library Integration&quot;">​</a></h3><p>Konfigo is designed as a CLI tool but can be integrated into build processes, deployment scripts, and configuration management workflows.</p><h2 id="version-compatibility" tabindex="-1">Version Compatibility <a class="header-anchor" href="#version-compatibility" aria-label="Permalink to &quot;Version Compatibility&quot;">​</a></h2><h3 id="schema-version-support" tabindex="-1">Schema Version Support <a class="header-anchor" href="#schema-version-support" aria-label="Permalink to &quot;Schema Version Support&quot;">​</a></h3><ul><li><code>apiVersion: v1</code> - Current stable version</li><li><code>apiVersion: konfigo/v1alpha1</code> - Legacy format (deprecated)</li></ul><h3 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking Changes&quot;">​</a></h3><p>Major version updates may include breaking changes to:</p><ul><li>Schema format and processing</li><li>Command-line flag syntax</li><li>Output format structure</li></ul><p>See release notes for migration guides and compatibility information.</p>`,48)]))}const m=e(r,[["render",d]]);export{u as __pageData,m as default};
