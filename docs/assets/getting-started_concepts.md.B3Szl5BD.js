import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.Bw7rlmih.js";const g=JSON.parse('{"title":"Basic Concepts: Understanding Konfigo","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started/concepts.md","filePath":"getting-started/concepts.md"}'),t={name:"getting-started/concepts.md"};function o(l,s,r,p,h,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="basic-concepts-understanding-konfigo" tabindex="-1">Basic Concepts: Understanding Konfigo <a class="header-anchor" href="#basic-concepts-understanding-konfigo" aria-label="Permalink to &quot;Basic Concepts: Understanding Konfigo&quot;">​</a></h1><p>Now that you&#39;ve seen Konfigo in action, let&#39;s build a solid understanding of how it works. This foundation will help you use Konfigo more effectively and know when to use its advanced features.</p><h2 id="what-is-configuration-management" tabindex="-1">What is Configuration Management? <a class="header-anchor" href="#what-is-configuration-management" aria-label="Permalink to &quot;What is Configuration Management?&quot;">​</a></h2><p><strong>Configuration management</strong> is the practice of handling settings, parameters, and options that control how your applications behave. In modern software development, you typically deal with:</p><ul><li><strong>Application settings</strong> (ports, timeouts, feature flags)</li><li><strong>Environment-specific values</strong> (database URLs, API keys)</li><li><strong>Deployment configurations</strong> (replicas, resources, networking)</li><li><strong>Service discovery</strong> (endpoints, load balancers)</li></ul><h3 id="the-problem-konfigo-solves" tabindex="-1">The Problem Konfigo Solves <a class="header-anchor" href="#the-problem-konfigo-solves" aria-label="Permalink to &quot;The Problem Konfigo Solves&quot;">​</a></h3><p>Traditional configuration management often leads to:</p><ul><li>🔥 <strong>Scattered files</strong> in different formats</li><li>🔄 <strong>Manual copying</strong> and error-prone editing</li><li>📁 <strong>Duplication</strong> across environments</li><li>🔍 <strong>Hard to validate</strong> configurations</li><li>💥 <strong>Runtime failures</strong> from bad configs</li></ul><p><strong>Konfigo centralizes and automates</strong> this entire process.</p><h2 id="konfigo-s-role-in-your-workflow" tabindex="-1">Konfigo&#39;s Role in Your Workflow <a class="header-anchor" href="#konfigo-s-role-in-your-workflow" aria-label="Permalink to &quot;Konfigo&#39;s Role in Your Workflow&quot;">​</a></h2><p>Think of Konfigo as a <strong>configuration compiler</strong> that sits between your source configurations and your final application configs:</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph &quot;Input Sources&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        A[Base Config&lt;br/&gt;app.yaml]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        B[Environment&lt;br/&gt;prod.yaml]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        C[Local Override&lt;br/&gt;local.json]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        D[Environment Vars&lt;br/&gt;DB_HOST=...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph &quot;Konfigo Processing&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        E[Merge Sources&lt;br/&gt;Priority Order]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        F[Apply Schema&lt;br/&gt;Validation]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        G[Transform Data&lt;br/&gt;Variables]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph &quot;Output&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        H[Final Config&lt;br/&gt;Ready to Use]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; E</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; E</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; E</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt; G</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    G --&gt; H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style E fill:#e1f5fe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style F fill:#f3e5f5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style G fill:#e8f5e8</span></span></code></pre></div><h3 id="configuration-sources-input" tabindex="-1">Configuration Sources (Input) <a class="header-anchor" href="#configuration-sources-input" aria-label="Permalink to &quot;Configuration Sources (Input)&quot;">​</a></h3><ul><li><strong>Base configurations</strong> (defaults, common settings)</li><li><strong>Environment overrides</strong> (dev, staging, prod)</li><li><strong>Local customizations</strong> (developer-specific)</li><li><strong>Runtime variables</strong> (environment variables)</li></ul><h3 id="konfigo-processing-transform" tabindex="-1">Konfigo Processing (Transform) <a class="header-anchor" href="#konfigo-processing-transform" aria-label="Permalink to &quot;Konfigo Processing (Transform)&quot;">​</a></h3><ul><li><strong>Intelligent merging</strong> with precedence rules</li><li><strong>Format conversion</strong> (JSON ↔ YAML ↔ TOML ↔ ENV)</li><li><strong>Variable substitution</strong> and templating</li><li><strong>Validation</strong> against schemas</li><li><strong>Transformation</strong> and data generation</li></ul><h3 id="final-configuration-output" tabindex="-1">Final Configuration (Output) <a class="header-anchor" href="#final-configuration-output" aria-label="Permalink to &quot;Final Configuration (Output)&quot;">​</a></h3><ul><li><strong>Single, complete configuration</strong> ready for use</li><li><strong>Multiple formats</strong> for different consumers</li><li><strong>Validated and consistent</strong> data</li><li><strong>Environment-appropriate</strong> values</li></ul><h2 id="the-konfigo-processing-pipeline" tabindex="-1">The Konfigo Processing Pipeline <a class="header-anchor" href="#the-konfigo-processing-pipeline" aria-label="Permalink to &quot;The Konfigo Processing Pipeline&quot;">​</a></h2><p>Understanding this pipeline helps you predict how Konfigo will process your configurations:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. Discovery     2. Parsing      3. Merging       4. Environment    5. Schema        6. Output</span></span>
<span class="line"><span>   ┌─────────┐     ┌─────────┐     ┌─────────┐      ┌─────────┐      ┌─────────┐     ┌─────────┐</span></span>
<span class="line"><span>   │ Find    │────▶│ Parse   │────▶│ Deep    │─────▶│ Apply   │─────▶│ Process │────▶│ Generate│</span></span>
<span class="line"><span>   │ Sources │     │ Formats │     │ Merge   │      │ Env Vars│      │ Schema  │     │ Output  │</span></span>
<span class="line"><span>   └─────────┘     └─────────┘     └─────────┘      └─────────┘      └─────────┘     └─────────┘</span></span></code></pre></div><h3 id="_1-discovery-finding-your-configurations" tabindex="-1">1. <strong>Discovery</strong>: Finding Your Configurations <a class="header-anchor" href="#_1-discovery-finding-your-configurations" aria-label="Permalink to &quot;1. **Discovery**: Finding Your Configurations&quot;">​</a></h3><p>Konfigo finds and identifies configuration files from:</p><ul><li>File paths you specify (<code>-s file1.yaml,file2.json</code>)</li><li>Directories (with optional recursion <code>-r</code>)</li><li>Standard input (pipe data in)</li></ul><h3 id="_2-parsing-understanding-formats" tabindex="-1">2. <strong>Parsing</strong>: Understanding Formats <a class="header-anchor" href="#_2-parsing-understanding-formats" aria-label="Permalink to &quot;2. **Parsing**: Understanding Formats&quot;">​</a></h3><p>Automatic format detection based on:</p><ul><li>File extensions (<code>.json</code>, <code>.yaml</code>, <code>.toml</code>, <code>.env</code>)</li><li>Content analysis for ambiguous cases</li><li>Explicit format flags (<code>-sj</code>, <code>-sy</code>, <code>-st</code>, <code>-se</code>)</li></ul><h3 id="_3-merging-combining-configurations" tabindex="-1">3. <strong>Merging</strong>: Combining Configurations <a class="header-anchor" href="#_3-merging-combining-configurations" aria-label="Permalink to &quot;3. **Merging**: Combining Configurations&quot;">​</a></h3><p>Deep merge with clear precedence:</p><ul><li>Later sources override earlier ones</li><li>Objects are merged recursively</li><li>Arrays are replaced (not merged)</li><li>Null values explicitly override</li></ul><h3 id="_4-environment-runtime-overrides" tabindex="-1">4. <strong>Environment</strong>: Runtime Overrides <a class="header-anchor" href="#_4-environment-runtime-overrides" aria-label="Permalink to &quot;4. **Environment**: Runtime Overrides&quot;">​</a></h3><p>Environment variables provide runtime flexibility:</p><ul><li><code>KONFIGO_KEY_*</code> overrides any configuration key</li><li>Highest precedence (always wins)</li><li>Perfect for containerized deployments</li></ul><h3 id="_5-schema-advanced-processing" tabindex="-1">5. <strong>Schema</strong>: Advanced Processing <a class="header-anchor" href="#_5-schema-advanced-processing" aria-label="Permalink to &quot;5. **Schema**: Advanced Processing&quot;">​</a></h3><p>Optional schema enables:</p><ul><li>Variable substitution and templating</li><li>Data validation and constraints</li><li>Structure transformation</li><li>Batch output generation</li></ul><h3 id="_6-output-final-configuration" tabindex="-1">6. <strong>Output</strong>: Final Configuration <a class="header-anchor" href="#_6-output-final-configuration" aria-label="Permalink to &quot;6. **Output**: Final Configuration&quot;">​</a></h3><p>Generate output in your preferred format:</p><ul><li>Single output to terminal or file</li><li>Multiple formats simultaneously</li><li>Batch generation for multiple environments</li></ul><h2 id="core-vocabulary" tabindex="-1">Core Vocabulary <a class="header-anchor" href="#core-vocabulary" aria-label="Permalink to &quot;Core Vocabulary&quot;">​</a></h2><p>Understanding these terms will help you follow the documentation:</p><table tabindex="0"><thead><tr><th>Term</th><th>Definition</th><th>Example</th></tr></thead><tbody><tr><td><strong>Source</strong></td><td>Input configuration file or data</td><td><code>base.yaml</code>, <code>prod.json</code></td></tr><tr><td><strong>Merge</strong></td><td>Combining multiple sources into one</td><td><code>base.yaml</code> + <code>prod.yaml</code> = merged config</td></tr><tr><td><strong>Precedence</strong></td><td>Which source wins when values conflict</td><td>Later sources override earlier ones</td></tr><tr><td><strong>Override</strong></td><td>Replace a value from an earlier source</td><td><code>port: 8080</code> → <code>port: 9090</code></td></tr><tr><td><strong>Deep merge</strong></td><td>Merge nested objects recursively</td><td>Combine <code>app.features</code> from multiple sources</td></tr><tr><td><strong>Schema</strong></td><td>Rules for processing configurations</td><td>Variables, validation, transformation</td></tr><tr><td><strong>Environment variable</strong></td><td>Runtime configuration override</td><td><code>KONFIGO_KEY_app.port=3000</code></td></tr><tr><td><strong>Variable</strong></td><td>Template placeholder for dynamic values</td><td><code>\${DATABASE_HOST}</code></td></tr><tr><td><strong>Immutable</strong></td><td>Protected paths that cannot be overridden</td><td>Security settings, critical configs</td></tr></tbody></table><h2 id="when-to-use-each-feature" tabindex="-1">When to Use Each Feature <a class="header-anchor" href="#when-to-use-each-feature" aria-label="Permalink to &quot;When to Use Each Feature&quot;">​</a></h2><p>Choose the right Konfigo approach for your needs:</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[I need to manage configurations] --&gt; B{Do I have multiple&lt;br/&gt;configuration sources?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|No| C[Single file format conversion]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Yes| D{Do sources conflict&lt;br/&gt;or have overlapping keys?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt;|No| E[Simple concatenation&lt;br/&gt;or side-by-side use]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt;|Yes| F{Do I need runtime&lt;br/&gt;overrides?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt;|No| G[Basic merging]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt;|Yes| H{Do I need validation&lt;br/&gt;or transformation?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    H --&gt;|No| I[Merging + Environment Variables]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    H --&gt;|Yes| J{Do I generate configs&lt;br/&gt;for multiple targets?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    J --&gt;|No| K[Simple Schema Processing]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    J --&gt;|Yes| L[Advanced Schema + Batch Generation]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; M[konfigo -s input.yaml -of output.json]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; N[Use separate configs]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    G --&gt; O[konfigo -s base.yaml -s prod.yaml]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    I --&gt; P[konfigo -s base.yaml -e KONFIGO_KEY_*]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    K --&gt; Q[konfigo -s config.yaml -S schema.yaml]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    L --&gt; R[konfigo -S schema.yaml -V variables.yaml]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style G fill:#e8f5e8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style I fill:#fff3e0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style K fill:#f3e5f5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style L fill:#e1f5fe</span></span></code></pre></div><h3 id="basic-merging-start-here" tabindex="-1"><strong>Basic Merging</strong> - Start Here <a class="header-anchor" href="#basic-merging-start-here" aria-label="Permalink to &quot;**Basic Merging** - Start Here&quot;">​</a></h3><p>Perfect for:</p><ul><li>Combining base configs with environment overrides</li><li>Converting between configuration formats</li><li>Simple deployment customization</li></ul><p><strong>Example</strong>: Deploy the same app to dev, staging, and prod with different database settings.</p><h3 id="environment-variables-runtime-flexibility" tabindex="-1"><strong>Environment Variables</strong> - Runtime Flexibility <a class="header-anchor" href="#environment-variables-runtime-flexibility" aria-label="Permalink to &quot;**Environment Variables** - Runtime Flexibility&quot;">​</a></h3><p>Great for:</p><ul><li>Containerized applications (Docker, Kubernetes)</li><li>CI/CD pipelines with dynamic values</li><li>Secrets that shouldn&#39;t be in files</li></ul><p><strong>Example</strong>: Override database passwords in production without changing config files.</p><h3 id="schemas-advanced-processing" tabindex="-1"><strong>Schemas</strong> - Advanced Processing <a class="header-anchor" href="#schemas-advanced-processing" aria-label="Permalink to &quot;**Schemas** - Advanced Processing&quot;">​</a></h3><p>Use when you need:</p><ul><li>Configuration validation and constraints</li><li>Dynamic value generation (UUIDs, timestamps)</li><li>Complex transformations</li><li>Multiple output formats from one source</li></ul><p><strong>Example</strong>: Generate configs for 50 microservices from a single template.</p><h2 id="mental-models-for-success" tabindex="-1">Mental Models for Success <a class="header-anchor" href="#mental-models-for-success" aria-label="Permalink to &quot;Mental Models for Success&quot;">​</a></h2><h3 id="think-in-layers" tabindex="-1">Think in Layers <a class="header-anchor" href="#think-in-layers" aria-label="Permalink to &quot;Think in Layers&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────┐ ← Environment Variables (highest precedence)</span></span>
<span class="line"><span>│ Runtime Overrides │</span></span>
<span class="line"><span>├─────────────────┤</span></span>
<span class="line"><span>│ Local Customization │ ← Developer-specific settings</span></span>
<span class="line"><span>├─────────────────┤</span></span>
<span class="line"><span>│ Environment Config │ ← prod.yaml, dev.yaml</span></span>
<span class="line"><span>├─────────────────┤</span></span>
<span class="line"><span>│ Base Configuration │ ← defaults.yaml (lowest precedence)</span></span>
<span class="line"><span>└─────────────────┘</span></span></code></pre></div><h3 id="configuration-as-code" tabindex="-1">Configuration as Code <a class="header-anchor" href="#configuration-as-code" aria-label="Permalink to &quot;Configuration as Code&quot;">​</a></h3><p>Treat your configuration management like software development:</p><ul><li><strong>Version control</strong> your config files</li><li><strong>Test</strong> your merging logic</li><li><strong>Validate</strong> before deployment</li><li><strong>Document</strong> your configuration patterns</li></ul><h3 id="progressive-enhancement" tabindex="-1">Progressive Enhancement <a class="header-anchor" href="#progressive-enhancement" aria-label="Permalink to &quot;Progressive Enhancement&quot;">​</a></h3><p>Start simple, add complexity as needed:</p><ol><li><strong>Basic merge</strong>: Get immediate value</li><li><strong>Environment variables</strong>: Add runtime flexibility</li><li><strong>Simple schema</strong>: Add validation</li><li><strong>Advanced schema</strong>: Complex transformations</li></ol><h2 id="common-patterns" tabindex="-1">Common Patterns <a class="header-anchor" href="#common-patterns" aria-label="Permalink to &quot;Common Patterns&quot;">​</a></h2><h3 id="environment-specific-deployment" tabindex="-1">Environment-Specific Deployment <a class="header-anchor" href="#environment-specific-deployment" aria-label="Permalink to &quot;Environment-Specific Deployment&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Base configuration + environment overlay</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> environments/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${ENV}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> final.json</span></span></code></pre></div><h3 id="multi-service-configuration" tabindex="-1">Multi-Service Configuration <a class="header-anchor" href="#multi-service-configuration" aria-label="Permalink to &quot;Multi-Service Configuration&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate configs for multiple services</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services.yaml</span></span></code></pre></div><h3 id="legacy-system-integration" tabindex="-1">Legacy System Integration <a class="header-anchor" href="#legacy-system-integration" aria-label="Permalink to &quot;Legacy System Integration&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Convert and merge legacy configs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> legacy.env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modern.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> integrated.toml</span></span></code></pre></div><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>With these concepts in mind, you&#39;re ready to:</p><h3 id="immediate-application-15-minutes" tabindex="-1"><strong>Immediate Application</strong> (15 minutes) <a class="header-anchor" href="#immediate-application-15-minutes" aria-label="Permalink to &quot;**Immediate Application** (15 minutes)&quot;">​</a></h3><ul><li><strong><a href="./../guide/">User Guide</a></strong> - Apply these concepts to real tasks</li></ul><h3 id="deeper-understanding-30-minutes" tabindex="-1"><strong>Deeper Understanding</strong> (30 minutes) <a class="header-anchor" href="#deeper-understanding-30-minutes" aria-label="Permalink to &quot;**Deeper Understanding** (30 minutes)&quot;">​</a></h3><ul><li><strong><a href="./../guide/merging.html">Merging Guide</a></strong> - Master configuration merging</li><li><strong><a href="./../guide/environment-variables.html">Environment Variables</a></strong> - Runtime configuration</li></ul><h3 id="advanced-capabilities-1-hours" tabindex="-1"><strong>Advanced Capabilities</strong> (1+ hours) <a class="header-anchor" href="#advanced-capabilities-1-hours" aria-label="Permalink to &quot;**Advanced Capabilities** (1+ hours)&quot;">​</a></h3><ul><li><strong><a href="./../schema/">Schema Basics</a></strong> - Unlock validation and transformation</li><li><strong><a href="./../guide/recipes.html">Recipes &amp; Examples</a></strong> - See real-world patterns</li></ul><h2 id="questions" tabindex="-1">Questions? <a class="header-anchor" href="#questions" aria-label="Permalink to &quot;Questions?&quot;">​</a></h2><ul><li><strong>Confused about a concept?</strong> Check the <a href="./../reference/faq.html">FAQ</a></li><li><strong>Need troubleshooting help?</strong> See the <a href="./../reference/troubleshooting.html">Troubleshooting Guide</a></li><li><strong>Want to see more examples?</strong> Browse <a href="./../guide/recipes.html">Recipes &amp; Examples</a></li></ul><p>Understanding these fundamentals will make everything else in Konfigo much easier to grasp. Take your time here - it&#39;s worth it!</p>`,84)]))}const u=i(t,[["render",o]]);export{g as __pageData,u as default};
