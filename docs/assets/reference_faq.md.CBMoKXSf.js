import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.Bw7rlmih.js";const g=JSON.parse('{"title":"Frequently Asked Questions","description":"","frontmatter":{},"headers":[],"relativePath":"reference/faq.md","filePath":"reference/faq.md"}'),t={name:"reference/faq.md"};function l(o,s,h,r,p,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="frequently-asked-questions" tabindex="-1">Frequently Asked Questions <a class="header-anchor" href="#frequently-asked-questions" aria-label="Permalink to &quot;Frequently Asked Questions&quot;">​</a></h1><p>Quick answers to the most common questions about Konfigo.</p><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><h3 id="q-what-exactly-does-konfigo-do" tabindex="-1"><strong>Q: What exactly does Konfigo do?</strong> <a class="header-anchor" href="#q-what-exactly-does-konfigo-do" aria-label="Permalink to &quot;**Q: What exactly does Konfigo do?**&quot;">​</a></h3><p><strong>A:</strong> Konfigo merges, validates, and transforms configuration files. Think of it as a &quot;configuration compiler&quot; that takes multiple config sources (JSON, YAML, TOML, ENV) and produces a single, validated output in your preferred format.</p><h3 id="q-how-is-konfigo-different-from-other-config-tools" tabindex="-1"><strong>Q: How is Konfigo different from other config tools?</strong> <a class="header-anchor" href="#q-how-is-konfigo-different-from-other-config-tools" aria-label="Permalink to &quot;**Q: How is Konfigo different from other config tools?**&quot;">​</a></h3><p><strong>A:</strong> Konfigo uniquely combines:</p><ul><li><strong>Multi-format support</strong> (JSON ↔ YAML ↔ TOML ↔ ENV)</li><li><strong>Intelligent deep merging</strong> with precedence rules</li><li><strong>Schema-driven processing</strong> (validation, transformation, generation)</li><li><strong>Environment variable integration</strong></li><li><strong>Batch output generation</strong></li></ul><h3 id="q-do-i-need-to-learn-schemas-to-use-konfigo" tabindex="-1"><strong>Q: Do I need to learn schemas to use Konfigo?</strong> <a class="header-anchor" href="#q-do-i-need-to-learn-schemas-to-use-konfigo" aria-label="Permalink to &quot;**Q: Do I need to learn schemas to use Konfigo?**&quot;">​</a></h3><p><strong>A:</strong> No! You can start with simple merging and format conversion:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml,prod.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> final.json</span></span></code></pre></div><p>Schemas unlock advanced features when you&#39;re ready.</p><h3 id="q-can-i-use-konfigo-without-installing-anything" tabindex="-1"><strong>Q: Can I use Konfigo without installing anything?</strong> <a class="header-anchor" href="#q-can-i-use-konfigo-without-installing-anything" aria-label="Permalink to &quot;**Q: Can I use Konfigo without installing anything?**&quot;">​</a></h3><p><strong>A:</strong> Yes! Konfigo is a single binary with no dependencies. Download and run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/ebogdum/konfigo/releases/latest/download/konfigo-linux-amd64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> konfigo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> konfigo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span></span></code></pre></div><h2 id="file-formats-and-compatibility" tabindex="-1">File Formats and Compatibility <a class="header-anchor" href="#file-formats-and-compatibility" aria-label="Permalink to &quot;File Formats and Compatibility&quot;">​</a></h2><h3 id="q-what-file-formats-does-konfigo-support" tabindex="-1"><strong>Q: What file formats does Konfigo support?</strong> <a class="header-anchor" href="#q-what-file-formats-does-konfigo-support" aria-label="Permalink to &quot;**Q: What file formats does Konfigo support?**&quot;">​</a></h3><p><strong>A:</strong> Input and output:</p><ul><li><strong>JSON</strong> (<code>.json</code>, <code>.jsonc</code>) - Comments supported in JSONC</li><li><strong>YAML</strong> (<code>.yaml</code>, <code>.yml</code>) - Full YAML 1.2 support</li><li><strong>TOML</strong> (<code>.toml</code>) - TOML v1.0.0</li><li><strong>ENV</strong> (<code>.env</code>, <code>.envrc</code>) - Key=value pairs</li></ul><h3 id="q-can-i-mix-different-formats-in-one-command" tabindex="-1"><strong>Q: Can I mix different formats in one command?</strong> <a class="header-anchor" href="#q-can-i-mix-different-formats-in-one-command" aria-label="Permalink to &quot;**Q: Can I mix different formats in one command?**&quot;">​</a></h3><p><strong>A:</strong> Absolutely! That&#39;s one of Konfigo&#39;s strengths:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml,override.json,local.toml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> final.json</span></span></code></pre></div><h3 id="q-how-does-konfigo-handle-invalid-file-formats" tabindex="-1"><strong>Q: How does Konfigo handle invalid file formats?</strong> <a class="header-anchor" href="#q-how-does-konfigo-handle-invalid-file-formats" aria-label="Permalink to &quot;**Q: How does Konfigo handle invalid file formats?**&quot;">​</a></h3><p><strong>A:</strong> Konfigo provides detailed error messages and suggestions:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Shows line numbers and specific syntax errors</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> invalid.yaml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Error: YAML parsing failed at line 5: invalid indentation</span></span></code></pre></div><h3 id="q-can-i-convert-between-formats-without-merging" tabindex="-1"><strong>Q: Can I convert between formats without merging?</strong> <a class="header-anchor" href="#q-can-i-convert-between-formats-without-merging" aria-label="Permalink to &quot;**Q: Can I convert between formats without merging?**&quot;">​</a></h3><p><strong>A:</strong> Yes! Use a single source file:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oj</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # YAML → JSON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.yaml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # JSON → YAML</span></span></code></pre></div><h2 id="configuration-merging" tabindex="-1">Configuration Merging <a class="header-anchor" href="#configuration-merging" aria-label="Permalink to &quot;Configuration Merging&quot;">​</a></h2><h3 id="q-how-does-konfigo-decide-which-values-to-keep-when-merging" tabindex="-1"><strong>Q: How does Konfigo decide which values to keep when merging?</strong> <a class="header-anchor" href="#q-how-does-konfigo-decide-which-values-to-keep-when-merging" aria-label="Permalink to &quot;**Q: How does Konfigo decide which values to keep when merging?**&quot;">​</a></h3><p><strong>A:</strong> Konfigo uses clear precedence rules:</p><ol><li><strong>Environment variables</strong> (<code>KONFIGO_KEY_*</code>) - Highest</li><li><strong>Later source files</strong> (rightmost in command)</li><li><strong>Earlier source files</strong> (leftmost in command)</li></ol><p>Example: <code>konfigo -s base.yaml,prod.yaml</code></p><ul><li><code>prod.yaml</code> overrides <code>base.yaml</code></li><li>Environment variables override both</li></ul><h3 id="q-what-happens-to-arrays-when-merging" tabindex="-1"><strong>Q: What happens to arrays when merging?</strong> <a class="header-anchor" href="#q-what-happens-to-arrays-when-merging" aria-label="Permalink to &quot;**Q: What happens to arrays when merging?**&quot;">​</a></h3><p><strong>A:</strong> Arrays are replaced completely, not merged:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># base.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># override.yaml  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Result: [&quot;app&quot;, &quot;production&quot;] (completely replaced)</span></span></code></pre></div><h3 id="q-can-i-protect-certain-configuration-values-from-being-overridden" tabindex="-1"><strong>Q: Can I protect certain configuration values from being overridden?</strong> <a class="header-anchor" href="#q-can-i-protect-certain-configuration-values-from-being-overridden" aria-label="Permalink to &quot;**Q: Can I protect certain configuration values from being overridden?**&quot;">​</a></h3><p><strong>A:</strong> Yes! Use immutable paths in schemas:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">immutable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;security.keys&quot;</span></span></code></pre></div><p>Note: Environment variables can still override immutable paths.</p><h3 id="q-how-do-i-merge-all-files-in-a-directory" tabindex="-1"><strong>Q: How do I merge all files in a directory?</strong> <a class="header-anchor" href="#q-how-do-i-merge-all-files-in-a-directory" aria-label="Permalink to &quot;**Q: How do I merge all files in a directory?**&quot;">​</a></h3><p><strong>A:</strong> Use the recursive flag:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configs/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # All files in configs/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configs/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merged.yaml</span></span></code></pre></div><h2 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h2><h3 id="q-how-do-i-override-configuration-with-environment-variables" tabindex="-1"><strong>Q: How do I override configuration with environment variables?</strong> <a class="header-anchor" href="#q-how-do-i-override-configuration-with-environment-variables" aria-label="Permalink to &quot;**Q: How do I override configuration with environment variables?**&quot;">​</a></h3><p><strong>A:</strong> Use <code>KONFIGO_KEY_</code> prefix with dot notation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Override nested values</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KONFIGO_KEY_database.host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prod-db.com</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KONFIGO_KEY_app.port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9090</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span></span></code></pre></div><h3 id="q-what-s-the-difference-between-konfigo-key-and-konfigo-var" tabindex="-1"><strong>Q: What&#39;s the difference between KONFIGO_KEY_ and KONFIGO_VAR_?</strong> <a class="header-anchor" href="#q-what-s-the-difference-between-konfigo-key-and-konfigo-var" aria-label="Permalink to &quot;**Q: What&#39;s the difference between KONFIGO_KEY_ and KONFIGO_VAR_?**&quot;">​</a></h3><p><strong>A:</strong></p><ul><li><strong><code>KONFIGO_KEY_*</code></strong>: Directly overrides configuration values</li><li><strong><code>KONFIGO_VAR_*</code></strong>: Provides variables for schema substitution</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Direct override</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KONFIGO_KEY_app.port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Schema variable  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KONFIGO_VAR_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8080</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (schema must use \${PORT} somewhere)</span></span></code></pre></div><h3 id="q-can-i-use-environment-variables-without-schemas" tabindex="-1"><strong>Q: Can I use environment variables without schemas?</strong> <a class="header-anchor" href="#q-can-i-use-environment-variables-without-schemas" aria-label="Permalink to &quot;**Q: Can I use environment variables without schemas?**&quot;">​</a></h3><p><strong>A:</strong> Yes! <code>KONFIGO_KEY_*</code> variables work without schemas:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KONFIGO_KEY_database.host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=localhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span></span></code></pre></div><h2 id="schemas" tabindex="-1">Schemas <a class="header-anchor" href="#schemas" aria-label="Permalink to &quot;Schemas&quot;">​</a></h2><h3 id="q-when-should-i-use-schemas" tabindex="-1"><strong>Q: When should I use schemas?</strong> <a class="header-anchor" href="#q-when-should-i-use-schemas" aria-label="Permalink to &quot;**Q: When should I use schemas?**&quot;">​</a></h3><p><strong>A:</strong> Use schemas when you need:</p><ul><li><strong>Validation</strong> (ensure configs are correct)</li><li><strong>Variables</strong> (environment-specific values)</li><li><strong>Transformation</strong> (modify data during processing)</li><li><strong>Generation</strong> (create UUIDs, timestamps, etc.)</li><li><strong>Batch processing</strong> (multiple outputs from templates)</li></ul><h3 id="q-are-schemas-required" tabindex="-1"><strong>Q: Are schemas required?</strong> <a class="header-anchor" href="#q-are-schemas-required" aria-label="Permalink to &quot;**Q: Are schemas required?**&quot;">​</a></h3><p><strong>A:</strong> No! Schemas are optional. You can use Konfigo for basic merging and format conversion without any schemas.</p><h3 id="q-can-i-validate-configurations-without-applying-transformations" tabindex="-1"><strong>Q: Can I validate configurations without applying transformations?</strong> <a class="header-anchor" href="#q-can-i-validate-configurations-without-applying-transformations" aria-label="Permalink to &quot;**Q: Can I validate configurations without applying transformations?**&quot;">​</a></h3><p><strong>A:</strong> Yes! Use the validate-only flag:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --validate-only</span></span></code></pre></div><h3 id="q-how-do-i-create-my-first-schema" tabindex="-1"><strong>Q: How do I create my first schema?</strong> <a class="header-anchor" href="#q-how-do-i-create-my-first-schema" aria-label="Permalink to &quot;**Q: How do I create my first schema?**&quot;">​</a></h3><p><strong>A:</strong> Start simple with variables:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># my-schema.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DATABASE_HOST&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transforms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database.host&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${DATABASE_HOST}&quot;</span></span></code></pre></div><h2 id="performance-and-limits" tabindex="-1">Performance and Limits <a class="header-anchor" href="#performance-and-limits" aria-label="Permalink to &quot;Performance and Limits&quot;">​</a></h2><h3 id="q-how-large-can-my-configuration-files-be" tabindex="-1"><strong>Q: How large can my configuration files be?</strong> <a class="header-anchor" href="#q-how-large-can-my-configuration-files-be" aria-label="Permalink to &quot;**Q: How large can my configuration files be?**&quot;">​</a></h3><p><strong>A:</strong> Konfigo handles large files well. For files &gt;100MB, use streaming:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stream</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> large-config.json</span></span></code></pre></div><h3 id="q-can-i-process-configurations-in-parallel" tabindex="-1"><strong>Q: Can I process configurations in parallel?</strong> <a class="header-anchor" href="#q-can-i-process-configurations-in-parallel" aria-label="Permalink to &quot;**Q: Can I process configurations in parallel?**&quot;">​</a></h3><p><strong>A:</strong> Yes! Use the parallel flag:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --parallel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configs/</span></span></code></pre></div><h3 id="q-does-konfigo-have-any-dependencies" tabindex="-1"><strong>Q: Does Konfigo have any dependencies?</strong> <a class="header-anchor" href="#q-does-konfigo-have-any-dependencies" aria-label="Permalink to &quot;**Q: Does Konfigo have any dependencies?**&quot;">​</a></h3><p><strong>A:</strong> No! Konfigo is a single binary with zero dependencies. Just download and run.</p><h2 id="security" tabindex="-1">Security <a class="header-anchor" href="#security" aria-label="Permalink to &quot;Security&quot;">​</a></h2><h3 id="q-how-should-i-handle-secrets-in-configurations" tabindex="-1"><strong>Q: How should I handle secrets in configurations?</strong> <a class="header-anchor" href="#q-how-should-i-handle-secrets-in-configurations" aria-label="Permalink to &quot;**Q: How should I handle secrets in configurations?**&quot;">​</a></h3><p><strong>A:</strong> Best practices:</p><ol><li><strong>Never commit secrets</strong> to version control</li><li><strong>Use environment variables</strong> for sensitive data:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KONFIGO_KEY_database.password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$SECRET_PASSWORD </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span></span></code></pre></div></li><li><strong>Use external secret management</strong> and inject at runtime</li><li><strong>Use immutable paths</strong> to protect critical settings</li></ol><h3 id="q-can-i-exclude-sensitive-data-from-output" tabindex="-1"><strong>Q: Can I exclude sensitive data from output?</strong> <a class="header-anchor" href="#q-can-i-exclude-sensitive-data-from-output" aria-label="Permalink to &quot;**Q: Can I exclude sensitive data from output?**&quot;">​</a></h3><p><strong>A:</strong> Yes! Use output schemas to filter sensitive fields:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">outputSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database.password&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api.secret_key&quot;</span></span></code></pre></div><h2 id="integration-and-deployment" tabindex="-1">Integration and Deployment <a class="header-anchor" href="#integration-and-deployment" aria-label="Permalink to &quot;Integration and Deployment&quot;">​</a></h2><h3 id="q-how-do-i-use-konfigo-in-docker" tabindex="-1"><strong>Q: How do I use Konfigo in Docker?</strong> <a class="header-anchor" href="#q-how-do-i-use-konfigo-in-docker" aria-label="Permalink to &quot;**Q: How do I use Konfigo in Docker?**&quot;">​</a></h3><p><strong>A:</strong> Common pattern:</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wget https://github.com/ebogdum/konfigo/releases/latest/download/konfigo-linux-amd64 -O /usr/local/bin/konfigo &amp;&amp; chmod +x /usr/local/bin/konfigo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configs/ /configs/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;konfigo -s /configs/base.yaml -of /app/config.json &amp;&amp; exec myapp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="q-how-do-i-integrate-with-kubernetes" tabindex="-1"><strong>Q: How do I integrate with Kubernetes?</strong> <a class="header-anchor" href="#q-how-do-i-integrate-with-kubernetes" aria-label="Permalink to &quot;**Q: How do I integrate with Kubernetes?**&quot;">​</a></h3><p><strong>A:</strong> Use ConfigMaps and environment variables:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ConfigMap</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app-config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  base.yaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    app:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      name: &quot;my-service&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deployment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      containers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">KONFIGO_KEY_database.host</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prod-db&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;konfigo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/etc/config/base.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-of&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tmp/config.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="q-can-i-use-konfigo-in-ci-cd-pipelines" tabindex="-1"><strong>Q: Can I use Konfigo in CI/CD pipelines?</strong> <a class="header-anchor" href="#q-can-i-use-konfigo-in-ci-cd-pipelines" aria-label="Permalink to &quot;**Q: Can I use Konfigo in CI/CD pipelines?**&quot;">​</a></h3><p><strong>A:</strong> Absolutely! Common CI/CD pattern:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Validate configurations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml,prod.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --validate-only</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate environment-specific configs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml,prod.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prod-config.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Deploy with generated config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment.yaml</span></span></code></pre></div><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><h3 id="q-what-should-i-do-if-konfigo-fails-with-file-not-found" tabindex="-1"><strong>Q: What should I do if Konfigo fails with &quot;file not found&quot;?</strong> <a class="header-anchor" href="#q-what-should-i-do-if-konfigo-fails-with-file-not-found" aria-label="Permalink to &quot;**Q: What should I do if Konfigo fails with &quot;file not found&quot;?**&quot;">​</a></h3><p><strong>A:</strong> Check these common issues:</p><ol><li><strong>File paths</strong> - Use absolute paths or verify current directory</li><li><strong>File permissions</strong> - Ensure files are readable</li><li><strong>File names</strong> - Check for typos</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Debug with verbose output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span></span></code></pre></div><h3 id="q-how-do-i-debug-schema-validation-errors" tabindex="-1"><strong>Q: How do I debug schema validation errors?</strong> <a class="header-anchor" href="#q-how-do-i-debug-schema-validation-errors" aria-label="Permalink to &quot;**Q: How do I debug schema validation errors?**&quot;">​</a></h3><p><strong>A:</strong> Use debug mode to see detailed validation information:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --validate-only</span></span></code></pre></div><h3 id="q-what-exit-codes-does-konfigo-use" tabindex="-1"><strong>Q: What exit codes does Konfigo use?</strong> <a class="header-anchor" href="#q-what-exit-codes-does-konfigo-use" aria-label="Permalink to &quot;**Q: What exit codes does Konfigo use?**&quot;">​</a></h3><p><strong>A:</strong></p><ul><li><code>0</code> - Success</li><li><code>1</code> - General error</li><li><code>3</code> - File not found</li><li><code>4</code> - Parse error</li><li><code>5</code> - Schema validation failed</li></ul><h2 id="common-use-cases" tabindex="-1">Common Use Cases <a class="header-anchor" href="#common-use-cases" aria-label="Permalink to &quot;Common Use Cases&quot;">​</a></h2><h3 id="q-how-do-i-manage-configurations-for-multiple-environments" tabindex="-1"><strong>Q: How do I manage configurations for multiple environments?</strong> <a class="header-anchor" href="#q-how-do-i-manage-configurations-for-multiple-environments" aria-label="Permalink to &quot;**Q: How do I manage configurations for multiple environments?**&quot;">​</a></h3><p><strong>A:</strong> Use the layer pattern:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Development</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml,environments/dev.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev-config.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Production</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.yaml,environments/prod.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prod-config.json</span></span></code></pre></div><h3 id="q-how-do-i-generate-configurations-for-microservices" tabindex="-1"><strong>Q: How do I generate configurations for microservices?</strong> <a class="header-anchor" href="#q-how-do-i-generate-configurations-for-microservices" aria-label="Permalink to &quot;**Q: How do I generate configurations for microservices?**&quot;">​</a></h3><p><strong>A:</strong> Use batch processing with schemas:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># services.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">konfigo_forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user-service&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SERVICE_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DB_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SERVICE_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DB_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services.yaml</span></span></code></pre></div><h3 id="q-how-do-i-convert-legacy-env-files-to-modern-yaml" tabindex="-1"><strong>Q: How do I convert legacy .env files to modern YAML?</strong> <a class="header-anchor" href="#q-how-do-i-convert-legacy-env-files-to-modern-yaml" aria-label="Permalink to &quot;**Q: How do I convert legacy .env files to modern YAML?**&quot;">​</a></h3><p><strong>A:</strong> Simple format conversion:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> legacy.env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modern.yaml</span></span></code></pre></div><h2 id="getting-help" tabindex="-1">Getting Help <a class="header-anchor" href="#getting-help" aria-label="Permalink to &quot;Getting Help&quot;">​</a></h2><h3 id="q-where-can-i-find-more-examples" tabindex="-1"><strong>Q: Where can I find more examples?</strong> <a class="header-anchor" href="#q-where-can-i-find-more-examples" aria-label="Permalink to &quot;**Q: Where can I find more examples?**&quot;">​</a></h3><p><strong>A:</strong> Check out:</p><ul><li><strong><a href="./../guide/recipes.html">Recipes &amp; Examples</a></strong> - Real-world patterns</li><li><strong><a href="./../guide/">User Guide</a></strong> - Task-oriented guides</li><li><strong><a href="./../schema/">Schema Guide</a></strong> - Advanced features</li></ul><h3 id="q-how-do-i-report-bugs-or-request-features" tabindex="-1"><strong>Q: How do I report bugs or request features?</strong> <a class="header-anchor" href="#q-how-do-i-report-bugs-or-request-features" aria-label="Permalink to &quot;**Q: How do I report bugs or request features?**&quot;">​</a></h3><p><strong>A:</strong></p><ul><li><strong>GitHub Issues</strong>: <a href="https://github.com/ebogdum/konfigo/issues" target="_blank" rel="noreferrer">github.com/ebogdum/konfigo/issues</a></li><li><strong>Bug reports</strong>: Include Konfigo version and minimal reproduction steps</li><li><strong>Feature requests</strong>: Describe your use case and desired behavior</li></ul><h3 id="q-can-i-contribute-to-konfigo" tabindex="-1"><strong>Q: Can I contribute to Konfigo?</strong> <a class="header-anchor" href="#q-can-i-contribute-to-konfigo" aria-label="Permalink to &quot;**Q: Can I contribute to Konfigo?**&quot;">​</a></h3><p><strong>A:</strong> Yes! Check the project&#39;s contribution guidelines on GitHub. Documentation improvements, bug fixes, and feature contributions are welcome.</p><hr><p>Still have questions? Check the <a href="./troubleshooting.html">Troubleshooting Guide</a> or browse the <a href="./../">complete documentation</a>.</p>`,126)]))}const c=i(t,[["render",l]]);export{g as __pageData,c as default};
